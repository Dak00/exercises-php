---

name: Function call as an expression
theory: |

  In programming, an expression is something that returns a usable output value. We already know a lot about expressions and their principles of composition. Math operations (addition, subtraction, etc.) and string operations (concatenation) are all expressions:

  ```php
  <?php

  1 + 5 * 3
  'He' . 'Let'
  // Variables can be a part of an expression
  $rate * 5
  ```

  One feature of expressions is that they return a result that can be assigned to a variable or printed. For instance:

  ```php
  <?php

  // Here the expression is 1 + 5
  $sum = 1 + 5;
  print_r(1 + 5);
  ```

  But not any code can be an expression. The definition of a variable is a statement, it can't be part of an expression and it will lead to an error:

  ```php
  <?php

  // Pointless code that won't work
  10 + $sum = 1 + 5;
  ```

  Why is this important to know? You can combine expressions to get more and more complex behavior in the most unexpected places and the most surprising ways, as you will see. You will get a better understanding of how you can combine pieces of code to get the desired results.

  Let's talk about functions. Is a function call an expression or not? We know that functions return results, which means that, yes, they are expressions. It leads to a lot of interesting possibilities. For example, we can call functions directly in math operations. This is how we can get the last character index in a word:

  ```php
  <?php

  $name = 'php';
  // Indexes count from zero
  // Method call and subtraction combined!
  $last_index = strlen($name) - 1;
  print_r($last_index); // 2
  ```

  This code has no new syntax. We've just combined what we already know. We could go even further:

  ```php
  <?php

  $name = 'php';
  print_r(strlen($name) - 1); // => 2
  ```

  All of this holds for any function, e.g. string functions:

  ```php
  <?php

  $name = 'php';
  // Using interpolation
  print_r("Last character: {$name[strlen($name) - 1]}");
  // => Last character: p
  ```

instructions: |

  Print the first and last letters of the sentence stored in the variable `text` using this format:

  <pre class='hexlet-basics-output'>
  First: N
  Last: t
  </pre>

  Try to create only one variable you want to assign the text to before you print it. In this lesson, we're practicing building a compound expression.

# tips: []
