---

name: Возврат значений
theory: |

  Функции в PHP становятся по настоящему полезными, когда они начинают возвращать данные, вместо печати их на экран. Тогда мы можем их использовать для дальнейших вычислений. Посмотрите на пример:

  ```php
  <?php

  $message = greetHexlet();
  print_r($message);
  ```

  Мы присваиваем переменной `$message` результат работы функции. Для работы такого кода функция должна внутри себя использовать инструкцию `return`:

  ```php
  <?php

  function greetHexlet()
  {
      $message = 'Hello, Hexlet!';
      return $message;
  }
  ```

  `return` особая инструкция, которая берет выражение записанное справа и отдает его наружу, тому коду, который вызвал функцию. Само выполнение функции на этом завершается, любой код после `return` не выполняется:

  ```php
  <?php

  function greetHexlet()
  {
      $message = 'Hello, Hexlet!';
      return $message;
      print_r('Я никогда не выполнюсь');
  }
  ```

  Для возврата не обязательно использовать переменную. Так как `return` работает с выражениями, то справа от него может появиться почти все что угодно. Здесь нужно руководствоваться принципами читаемости кода:

  ```php
  <?php

  function greetHexlet()
  {
      return 'Hello, Hexlet!';
  }
  ```

  И пример с вычислением:

  ```php
  <?php

  function doubleFive()
  {
      return 5 + 5;
  }
  ```

  Но даже если внутри функции не прописана инструкция `return`, возврат у функции все равно есть. По умолчанию любая функция возвращает `NULL`. Например это делает функция `print_r()`, которая печатает текст на экран, но ничего не возвращает. В таком случае возврат равен `NULL`. Это специальное значение, которое обозначает "отсутствие".

  ```php
  <?php

  $result = print_r('Сюда можно поместить любой текст');
  // Чтобы увидеть null, нужно воспользоваться другой функцией – var_dump()
  var_dump(result);
  // => NULL

  // Или еще проще, без создания промежуточной переменной
  var_dump(print_r('Wow'));
  // => Wow
  // => NULL
  ```

  Зачем нужно такое поведение? Вызов функции - выражение, а выражение всегда должно возвращать результат, иначе в коде все время возникали ошибки, в тех случаях, когда возвращаемых данных нет.

  Вопрос на самопроверку. Что выведет этот код?

  ```php
  <?php

  // Определение
  function run()
  {
      return 5;
      return 10;
  }

  // Использование
  run();
  // => ?
  ```

instructions: |

  Реализуйте функцию `getCurrentYear()`, которая возвращает наружу текущий год

  Пример вызова:

  ```php
  <?php

  getCurrentYear(); // 2022
  ```

  Для выполнения этого задания, вам понадобится выполнить несколько действий:
  * Получить текущую дату с помощью функции `date('Y-m-d')`. В реальности можно сразу вернуть год с помощью передачи этой функции формата вывода `'Y'`, который выполняет нашу задачу. Но здесь мы хотим потренироваться.
  * Извлечь из полученной даты год с помощью метода `substr()`
  * Вернуть год наружу

  Вам не нужно вызывать свою функцию, только определить её.

tips: []
